#!/bin/sh

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"

export PATH="${PATH}:/usr/script"

if [ -d /home/root ]; then
	export HOME="/home/root"
	cd
fi

# Function to determine if a BusyBox update has been flagged and do the update.
# This code should be run just before a restart to ensure that any shell changes
# do not impact running code.
#
function check_busybox_update {
	if [ -e /etc/enigma2/.busybox_update_required ]; then
		DEFERRED=`cat /etc/enigma2/.busybox_update_required`
		rm /etc/enigma2/.busybox_update_required
		${DEFERRED} 2>&1 | tee -a /home/root/opkgupgrade.log
	fi
}

BRANDCHECK=`sed -En 's|^brand=(.+)$|\1|p' /usr/lib/enigma.info`
MODELCHECK=`sed -En 's|^model=(.+)$|\1|p' /usr/lib/enigma.info`
PLATFORMCHECK=`sed -En 's|^platform=(.+)$|\1|p' /usr/lib/enigma.info`
SOCFAMILY=`sed -En 's|^socfamily=(....).*$|\1|p' /usr/lib/enigma.info`
PYVER=`sed -En 's|^python=(.+)$|\1|p' /usr/lib/enigma.info`

if [ "${PLATFORMCHECK}" == "octagonhisil" ] || [ "${PLATFORMCHECK}" == "octagonhisilnew" ] || [ "${PLATFORMCHECK}" == "uclanhisil" ] || [ "${PLATFORMCHECK}" == "gbmv200" ] || [ "${PLATFORMCHECK}" == "qviarthisil" ] || [ "${MODELCHECK}" == "beyonwizv2" ] || [ "${MODELCHECK}" == "viper4k" ]; then
	COUNT=`ps -ef | grep libreader | grep -v "grep" | wc -l`
	if [ "${COUNT}" -eq "0" ];then
		libreader 720P_50
	fi
fi

if [ "${PLATFORMCHECK}" == "dmamlogic" ]; then
	export media_arm_audio_decoder="ape,flac,dts,ac3,eac3,wma,wmapro,mp3,aac,vorbis,raac,cook,amr,pcm,adpcm"
	echo "1" > /sys/class/graphics/fb0/osd_clear
	echo "1" > /sys/class/graphics/fb1/osd_clear
	FIRSTRUN=`sed -En 's|^config\.misc\.firstrun=(.+)$|\1|p' /etc/enigma2/settings | tr [A-Z] [a-z]`
	if [ "$FIRSTRUN" == "true" ]; then
		echo "1080p50hz" > /sys/class/display/mode
	fi
fi

if [ -f /proc/stb/fp/led_color ]; then
	echo "00ffffff" > /proc/stb/fp/led_color
elif [ -f /proc/stb/fp/led_brightness ]; then
	echo "000000ff" > /proc/stb/fp/led_brightness
fi

if [ -f /proc/stb/fp/nec_ir ]; then
	echo "1" > /proc/stb/fp/nec_ir
	[ -f /sys/class/remote/amremote/protocol ] && echo "2" > /sys/class/remote/amremote/protocol
fi

# LC_ALL available?
if [ -z $LC_ALL ] && [ ${PYVER::1} == 3 ]; then
	export LC_ALL=en_GB.utf8
fi

# Check for sundtek tuner helper lib.
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so @libdir@/libopen.so.0.0.0"
else
	LIBS="@libdir@/libopen.so.0.0.0"
fi

# This should not be done as it will suppress the appropriate diagnostic message from within Enigma2.
#
# if [ ! -e /etc/enigma2/settings ]; then
# 	touch /etc/enigma2/settings
# fi

# Enigma main loop.
while : ; do
	# Show backdrop on enigma2 start.
	SKIN=`sed -En 's|^config\.skin\.primary_skin=(.+)/skin\.xml$|\1|p' "@sysconfdir@/enigma2/settings"`
	if [ -n "${SKIN}" ]; then
		SEARCHDIRS="@sysconfdir@/enigma2/$SKIN @sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/$SKIN @datadir@/enigma2/skin_default @datadir@/enigma2"
	else
		SEARCHDIRS="@sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/skin_default @datadir@/enigma2"
	fi
	for DIR in $SEARCHDIRS; do
		if [ -d "${DIR}" ] && [ -f "${DIR}/backdrop.mvi" ] && [ -x "@bindir@/showiframe" ]; then
			if [ "${SOCFAMILY}" == "hisi" ]; then
				killall -9 showiframe; sleep 0.1
			fi
			"@bindir@/showiframe" "${DIR}/backdrop.mvi"
			break
		fi
	done

	# Hook to execute scripts always before enigma2 start.
	if [ -x "@bindir@/enigma2_pre_start.sh" ]; then
		"@bindir@/enigma2_pre_start.sh"
	fi

	if [ "${BRANDCHECK}" == "dreambox" ]; then
		DISK=$(grep "/media/ba" /proc/mounts | awk '{gsub("/media/ba",""); print $1}' | head -n 1)
		umount -f /media/ba
		sleep 0.1
		umount -f "${DISK}"
		sleep 0.1
		mkdir -p /media/ba
		sleep 0.1
		mount "${DISK}" /media/ba
		sleep 0.1
	fi

	# Dreamci.
	if [ -x "@bindir@/enigma2_pre_start_ciplus.sh" ]; then
		"@bindir@/enigma2_pre_start_ciplus.sh"
	fi

	# Start enigma.
	sync

	(sleep 0.1; echo "Enigma2 is the main application so adjust oom score!"; PID=$(pidof enigma2); \
		[ -e "/proc/${PID}/oom_score_adj" ] && echo "-999" > "/proc/${PID}/oom_score_adj" || echo "-17" > "/proc/${PID}/oom_adj";) &

	# Set the debug level to be used for enigma2 logging.
	if [ -z "${ENIGMA_DEBUG_LVL}" ]; then
		DEBUGLEVEL=`sed -En 's|^config\.crash\.debugLevel=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGLEVEL}" ] || DEBUGLEVEL="3"
		DEBUG_LVL="${DEBUGLEVEL}"
	else
		DEBUG_LVL="${ENIGMA_DEBUG_LVL}"
	fi

	# Set time format used to prefix each line in the debug logs.
	DEBUGTIME=`sed -En 's|^config\.crash\.debugTimeFormat=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
	[ -n "${DEBUGTIME}" ] || DEBUGTIME="2"
	DEBUG_TIME="${DEBUGTIME}"

	if [ "${DEBUG_LVL}" -lt "4" ]; then
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2"
	else
		DEBUGDIR=`sed -En 's|^config\.crash\.debugPath=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGDIR}" ] && [ -d "${DEBUGDIR}" ] || DEBUGDIR="/home/root/logs/"
		# Remove old logfiles.
		KEEP=`sed -En 's|^config\.crash\.debugFileCount=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${KEEP}" ] || KEEP="5"
		for FILE in `ls -t "${DEBUGDIR}"enigma2_debug_*.log`; do
			let "KEEP--"
			if [ "${KEEP}" -lt "1" ]; then
				rm "${FILE}"
			fi
		done
		# Today's log file.
		FILE="${DEBUGDIR}enigma2_debug_$(date +%Y-%m-%d_%H-%M-%S).log"
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2" >> "${FILE}" 2>&1
	fi

	# Enigma2 exit codes:
	#
	#  1 - halt
	#  2 - reboot
	#  3 - restart enigma
	#  4 - front processor upgrade
	#  5 - install new settings
	#  7 - manufacturer reset
	# 12 - Reboot to android
	# 16 - Reboot to recovery
	# 42 - offline update
	# 43 - restart for autoinstall
	# 44 - INI MICOM upgrade
	# 45 - GigaBlue WOL
	#
	# >128 signal

	RET=$?
	case ${RET} in
		1)
			if [ "${BRANDCHECK}" == "atto" ]; then
				echo "----" > /dev/player/panel
				echo -n "standby" > /sys/power/state
			fi
			if [ "${BRANDCHECK}" == "wetek" ]; then
				echo "0" > /sys/class/leds/wetek\:blue\:wifiled/brightness
				echo "0" > /sys/class/leds/wetek\:blue\:ethled/brightness
				echo "mem" > /sys/power/state
			fi
			if [ -f /proc/stb/fp/led_color ]; then
				echo "00ffffff" > /proc/stb/fp/led_color
			elif [ -f /proc/stb/fp/led_brightness ]; then
				echo "00000008" > /proc/stb/fp/led_brightness
			fi
			check_busybox_update
			/sbin/halt
			;;
		2)
			[ -f /proc/stb/fp/force_restart ] && echo "1" > /proc/stb/fp/force_restart
			check_busybox_update
			/sbin/reboot
			;;
		3)
			;;
		4)
			/sbin/rmmod lcd
			"@sbindir@/fpupgrade" --upgrade 2>&1 | tee /home/root/fpupgrade.log
			sleep 0.1;
			/sbin/rmmod fp
			/sbin/modprobe fp
			check_busybox_update
			/sbin/reboot
			;;
		5)
			if ! grep -q config.misc.RestartUI /etc/enigma2/settings; then
				echo "config.misc.RestartUI=true" >>/etc/enigma2/settings
			fi
			;;
		7)
			rm -R /etc/enigma2
			;;
		12)
			if [ -e /dev/block/by-name/bootoptions ]; then
				mkdir -p /tmp/bootoptions
				mount /dev/block/by-name/bootoptions /tmp/bootoptions
				cp -f /tmp/bootoptions/STARTUP_ANDROID /tmp/bootoptions/STARTUP_ONCE
			else
				echo "rescue" > /proc/stb/fp/boot_mode
			fi
			[ -e "@bindir@/setenv" ] && "@bindir@/setenv" default_sys 1
			[ -e "@sbindir@/fw_setenv" ] && "@sbindir@/fw_setenv" bootfromnand 1
			check_busybox_update
			/sbin/reboot
			;;
		16)
			if [ -e /dev/block/by-name/flag ]; then
				echo -n "0" > /dev/block/by-name/flag
			elif [ -e /dev/block/by-name/bootoptions ]; then
				mkdir -p /tmp/bootoptions
				mount /dev/block/by-name/bootoptions /tmp/bootoptions
				cp -f /tmp/bootoptions/STARTUP_RECOVERY /tmp/bootoptions/STARTUP_ONCE
			else
				echo "rescue" > /proc/stb/fp/boot_mode
			fi
			check_busybox_update
			/sbin/reboot
			;;
		42)
			df -P | grep -v "tmpfs " | awk '{print $6}' | tail -n +3 > /tmp/upgrade_mountpoints.txt
			while read LINE; do
				if [ -f "${LINE}/var/lib/opkg/status" ]; then
				DESTS="${DESTS}" --add-dest "${LINE}":"${LINE}"
			fi
			done < /tmp/upgrade_mountpoints.txt
			# Bind the console (when available).
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			PREVUPD="0"
			CURRUPD="999"
			opkg update 2>&1 | tee /home/root/opkgupgrade.log
			# update all other packages
			while [ "${CURRUPD}" -gt "0" ] && [ "${CURRUPD}" -ne "${PREVUPD}" ]; do
				opkg upgrade "${DESTS}" 2>&1 | tee -a /home/root/opkgupgrade.log
				PREVUPD="${CURRUPD}"
				CURRUPD=`opkg list-upgradable | wc -l`
				echo "===> ${CURRUPD} PACKAGE(S) REMAINING" >> /home/root/opkupgrade.log
			done
			check_busybox_update
			/sbin/reboot
			;;
		43)
			# Auto install and autobackup.
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			/etc/init.d/settings-restore.sh
			/etc/init.d/avahi-daemon stop
			ifdown eth1
			ip addr flush dev eth1 scope global
			ifdown eth0
			ip addr flush dev eth0 scope global
			/etc/init.d/networking stop
			killall -9 udhcpc
			rm /var/run/udhcpc*
			/etc/init.d/dbus-1 reload
			/etc/init.d/networking start
			/etc/init.d/avahi-daemon start
			if [ ! -f /etc/.doNotAutoinstall ]; then
				touch /etc/.doAutoinstall
			else
				rm -f /etc/.doNotAutoInstall
			fi
			break
			;;
		44)
			"@libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear"
			"@bindir@/showiframe" "@libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi"
			echo "fpupload" >/proc/vfd && sleep 3 && dd bs=256k if=/tmp/micom.bin of=/dev/mcu
			"@bindir@/showiframe" "@libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi"
			# Wait forever for the user to power off.
			while(true) ; do sleep 60 ; done
			;;
		45)
			echo "    " > /dev/lcd0
			"@bindir@/gigablue_wol"
			;;
		*)
			break
			;;
	esac
done
